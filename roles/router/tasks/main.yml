---
- name: Get Routers in this namespace
  kubernetes.core.k8s_info:
    api_version: routernetes.net/v1alpha1
    kind: Router
    namespace: "{{ ansible_operator_meta.namespace }}"
    field_selectors:
      - metadata.name!={{ ansible_operator_meta.name }}
  register: this_namespace_routers

- name: Get Routers in other namespaces
  kubernetes.core.k8s_info:
    api_version: routernetes.net/v1alpha1
    kind: Router
    field_selectors:
      - metadata.namespace!={{ ansible_operator_meta.namespace }}
  register: other_namespace_routers

- name: Combine lists
  ansible.builtin.set_fact:
    routers: "{{ this_namespace_routers.resources + other_namespace_routers.resources }}"

- name: Get number of Routers
  ansible.builtin.set_fact:
    router_number: "{{ routers | length }}"

- name: Fail if another Router exists
  ansible.builtin.fail:
    msg: The system may only have 1 Router at a time.
  when: router_number|int > 0

- name: Copy configured DNS listen interface
  ansible.builtin.set_fact:
    dns_listen_interface: "{{ dns.listen_interface }}"
  when: dns.listen_interface is defined

- name: Set default DNS listen interface
  ansible.builtin.set_fact:
    dns_listen_interface: "{{ item.name }}"
  with_items: "{{ interfaces }}"
  when: dns_listen_interface is not defined and (item.zone is not defined or (item.zone is defined and item.zone == "inside"))

- name: dnsmasq-config
  kubernetes.core.k8s:
    template: dnsmasq-config.yaml.j2
    apply: yes
    server_side_apply:
      field_manager: ansible
      force_conflicts: yes
  notify:
    - restart daemonset

- name: firewalld-config
  kubernetes.core.k8s:
    template: firewalld-config.yaml.j2
    apply: yes
    server_side_apply:
      field_manager: ansible
      force_conflicts: yes
  notify:
    - restart daemonset

- name: zincati-config
  kubernetes.core.k8s:
    template: zincati-config.yaml.j2
    apply: yes
    server_side_apply:
      field_manager: ansible
      force_conflicts: yes
  notify:
    - restart daemonset

- name: nm-config
  kubernetes.core.k8s:
    template: nm-config.yaml.j2
    apply: yes
    server_side_apply:
      field_manager: ansible
      force_conflicts: yes
  notify:
    - restart daemonset

- name: dhcp-pvc
  kubernetes.core.k8s:
    template: dhcp-pvc.yaml.j2
    apply: yes
    server_side_apply:
      field_manager: ansible
      force_conflicts: yes

- name: daemonset
  kubernetes.core.k8s:
    template: daemonset.yaml.j2
    apply: yes
    server_side_apply:
      field_manager: ansible
      force_conflicts: yes
  register: daemonset_status
