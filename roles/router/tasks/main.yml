---
- name: Check for OpenShift
  kubernetes.core.k8s_info:
    api_version: config.openshift.io/v1
    kind: ClusterVersion
    name: version
  register: openshift_version

- name: Set OpenShift value
  when: openshift_version.resources|length|int > 0
  ansible.builtin.set_fact:
    is_openshift: true

- name: Get Routers in this namespace
  kubernetes.core.k8s_info:
    api_version: routernetes.net/v1alpha1
    kind: Router
    namespace: "{{ ansible_operator_meta.namespace }}"
    field_selectors:
      - metadata.name!={{ ansible_operator_meta.name }}
  register: this_namespace_routers

- name: Get Routers in other namespaces
  kubernetes.core.k8s_info:
    api_version: routernetes.net/v1alpha1
    kind: Router
    field_selectors:
      - metadata.namespace!={{ ansible_operator_meta.namespace }}
  register: other_namespace_routers

- name: Combine lists
  ansible.builtin.set_fact:
    routers: "{{ this_namespace_routers.resources + other_namespace_routers.resources }}"

- name: Fail if another Router exists
  when: routers|length|int > 0
  ansible.builtin.fail:
    msg: The system may only have 1 Router at a time.

- name: Copy configured DNS listen interface
  when: dns.listen_interface is defined
  ansible.builtin.set_fact:
    dns_listen_interface: "{{ dns.listen_interface }}"

- name: Set default DNS listen interface
  when:
    - dns_listen_interface is not defined
    - item.zone is not defined or (item.zone is defined and item.zone == "inside")
  ansible.builtin.set_fact:
    dns_listen_interface: "{{ item.name }}"
  with_items: "{{ interfaces }}"

- name: Get node info
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Node
  register: node_info

- name: Check for zincati
  when:
    - node_info["resources"][0]["status"]["nodeInfo"]["osImage"].startswith("Fedora CoreOS")
    - not is_openshift
  ansible.builtin.set_fact:
    has_zincati: true

- name: Dnsmasq-config
  kubernetes.core.k8s:
    template:
      path: dnsmasq-config.yaml.j2
    apply: true
    server_side_apply:
      field_manager: ansible
      force_conflicts: true
  notify:
    - restart daemonset

- name: Firewalld-config
  kubernetes.core.k8s:
    template:
      path: firewalld-config.yaml.j2
    apply: true
    server_side_apply:
      field_manager: ansible
      force_conflicts: true
  notify:
    - restart daemonset

- name: Zincati-config
  when: has_zincati
  kubernetes.core.k8s:
    template:
      path: zincati-config.yaml.j2
    apply: true
    server_side_apply:
      field_manager: ansible
      force_conflicts: true
  notify:
    - restart daemonset

- name: Nm-config
  kubernetes.core.k8s:
    template:
      path: nm-config.yaml.j2
    apply: true
    server_side_apply:
      field_manager: ansible
      force_conflicts: true
  notify:
    - restart daemonset

- name: Dhcp-pvc
  kubernetes.core.k8s:
    template:
      path: dhcp-pvc.yaml.j2
    apply: true
    server_side_apply:
      field_manager: ansible
      force_conflicts: true

- name: Service-account
  kubernetes.core.k8s:
    template:
      path: service-account.yaml.j2
    apply: true
    server_side_apply:
      field_manager: ansible
      force_conflicts: true

- name: Cluster-role-binding
  when: is_openshift
  kubernetes.core.k8s:
    template:
      path: cluster-role-binding.yaml.j2
    apply: true
    server_side_apply:
      field_manager: ansible
      force_conflicts: true

- name: Daemonset
  kubernetes.core.k8s:
    template:
      path: daemonset.yaml.j2
    apply: true
    server_side_apply:
      field_manager: ansible
      force_conflicts: true
  register: daemonset_status
