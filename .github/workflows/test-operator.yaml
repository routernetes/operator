name: Test operator

on:
  push:
    branches:
      - main
  workflow_dispatch:
  pull_request:

env:
  IMAGE_TAG_BASE: localhost/routernetes-operator

jobs:
  test-operator:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up system
        run: |
          sudo apt-get update
          sudo apt-get -y install firewalld tuned network-manager qemu-user-static
          sudo systemctl disable --now ufw
          sudo systemctl disable --now firewalld
          sudo systemctl disable --now tuned
          sudo systemctl disable --now systemd-networkd
          sudo rm -f /usr/lib/NetworkManager/conf.d/10-globally-managed-devices.conf
          sudo sed -i "s/managed=.*/managed=true/g" /etc/NetworkManager/NetworkManager.conf
          sudo systemctl restart NetworkManager

      - name: Install k3s
        run: |
          sudo nmcli connection add type dummy ifname k3s-lo ipv4.method manual ipv4.addresses 100.64.0.1/32 ipv6.method ignore connection.zone r9s-internal
          sudo nmcli connection up dummy-k3s-lo
          curl -sfL https://get.k3s.io | sh -s - --disable=traefik --disable=servicelb --flannel-backend=host-gw --flannel-iface=k3s-lo
          sleep 30

      - name: Install OLM
        run: |
          export ARCH=$(case $(uname -m) in x86_64) echo -n amd64 ;; aarch64) echo -n arm64 ;; *) echo -n $(uname -m) ;; esac)
          export OS=$(uname | awk '{print tolower($0)}')
          export OPERATOR_SDK_DL_URL=https://github.com/operator-framework/operator-sdk/releases/latest/download
          sudo -E curl -L -o /usr/local/bin/operator-sdk ${OPERATOR_SDK_DL_URL}/operator-sdk_${OS}_${ARCH}
          sudo chmod +x /usr/local/bin/operator-sdk
          export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
          sudo -E operator-sdk olm install
          sleep 30
          sudo k3s kubectl wait --timeout=24h --for=jsonpath='{.status.connectionState.lastObservedState}'=READY -n olm catalogsource/operatorhubio-catalog

      - name: Setup local registry
        run: |
          sudo mkdir -p /certs
          sudo openssl req \
            -newkey rsa:4096 -nodes -sha256 -keyout /certs/domain.key \
            -addext "subjectAltName = DNS:myregistry.domain.com" \
            -x509 -days 365 -out /certs/domain.crt -subj "/C=US/ST=Texas/L=Plano/O=Acme Inc. /OU=IT Department/CN=acme.com"
          sudo mkdir -p /var/lib/registry
          sudo podman run --privileged -d --name registry -p 443:443 -v /var/lib/registry:/var/lib/registry -v /certs:/certs \
            -e REGISTRY_HTTP_ADDR=0.0.0.0:443 \
            -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/domain.crt \
            -e REGISTRY_HTTP_TLS_KEY=/certs/domain.key --restart=always registry:2
          sudo bash -c 'cat <<EOF >>/etc/containers/registries.conf
          [registries.insecure]
          registries = ["localhost"]
          EOF'

      - name: Build operator
        run: |
          make podman-build podman-push

      - name: Build operator bundle
        run: |
          make bundle bundle-build bundle-push

      - name: Install operator bundle
        run: |
          export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
          sudo -E operator-sdk run bundle ${IMAGE_TAG_BASE}-bundle:v0.0.1 -n operators --skip-tls-verify

      - name: Check operator bundle
        run: |
          sudo k3s kubectl wait --timeout=24h --for=jsonpath='{.status.state}'=AtLatestKnown -n operators sub/routernetes-operator-v0-0-1-sub
          export CSV=$(sudo k3s kubectl get -n operators sub/routernetes-operator-v0-0-1-sub -o jsonpath='{.status.installedCSV}')
          sleep 30
          sudo -E k3s kubectl wait --timeout=24h --for=jsonpath='{.status.phase}'=Succeeded -n operators csv/${CSV}
